/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.brapi.v2.api;

import javax.validation.Valid;

import org.brapi.v2.model.TrialListResponse;
import org.brapi.v2.model.TrialSearchRequest;
import org.brapi.v2.model.TrialSingleResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.threeten.bp.LocalDate;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-06-24T08:33:51.198Z[GMT]")
@Api(value = "trials", description = "the trials API", tags={ "Trials" })
public interface TrialsApi {

	public static final String trialsGet_url = "trials";
	public static final String trialsTrialDbIdGet_url = "trials/{trialDbId}";
    public static final String searchTrialsPost_url = "search/trials";

    @ApiOperation(value = "Returns a filtered list of `Trial` objects", notes = "Returns a filtered list of `Trials` objects. Empty body accepted", authorizations = { @Authorization(value = "AuthorizationToken")    }, tags={ "Trials" })
        @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK", response = TrialListResponse.class),
//            @ApiResponse(code = 202, message = "Accepted", response = Model202AcceptedSearchResponse.class),
            @ApiResponse(code = 400, message = "Bad Request", response = String.class),
            @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
            @ApiResponse(code = 403, message = "Forbidden", response = String.class) })
        @RequestMapping(value = ServerinfoApi.URL_BASE_PREFIX + "/" + searchTrialsPost_url,
            produces = { "application/json" }, 
            consumes = { "application/json" }, 
            method = RequestMethod.POST)
        ResponseEntity<TrialListResponse> searchTrialsPost(@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong> Bearer {token_string} </strong>") @RequestHeader(value="Authorization", required=false) String authorization, @ApiParam @Valid @RequestBody TrialSearchRequest body);

    @ApiOperation(value = "Get a filtered list of Trials", notes = "Retrieve a filtered list of breeding Trials. A Trial is a collection of Studies", authorizations = {
        @Authorization(value = "AuthorizationToken")    }, tags={ "Trials" })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = TrialListResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class) })
    @RequestMapping(value = ServerinfoApi.URL_BASE_PREFIX + "/" + trialsGet_url,
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TrialListResponse> trialsGet(@ApiParam(value = "Filter active status true/false.") @Valid @RequestParam(value = "active", required = false) Boolean active, @ApiParam(value = "Common name for the crop associated with this trial") @Valid @RequestParam(value = "commonCropName", required = false) String commonCropName, @ApiParam(value = "Contact entities associated with this trial") @Valid @RequestParam(value = "contactDbId", required = false) String contactDbId, @ApiParam(value = "Program filter to only return trials associated with given program id.") @Valid @RequestParam(value = "programDbId", required = false) String programDbId, @ApiParam(value = "Filter by location") @Valid @RequestParam(value = "locationDbId", required = false) String locationDbId, @ApiParam(value = "The start of the overlapping search date range. `searchDateRangeStart` must be before `searchDateRangeEnd`.  Return a Trial entity if any of the following cases are true  - `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is null   - `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is after `trial.startDate`  - `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is null  - `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is before `trial.endDate`") @Valid @RequestParam(value = "searchDateRangeStart", required = false) LocalDate searchDateRangeStart, @ApiParam(value = "The start of the overlapping search date range. `searchDateRangeStart` must be before `searchDateRangeEnd`.  Return a Trial entity if any of the following cases are true  - `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is null   - `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is after `trial.startDate`  - `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is null  - `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is before `trial.endDate`") @Valid @RequestParam(value = "searchDateRangeEnd", required = false) LocalDate searchDateRangeEnd, @ApiParam(value = "Filter by connected studyDbId") @Valid @RequestParam(value = "studyDbId", required = false) String studyDbId, @ApiParam(value = "Filter by trialDbId") @Valid @RequestParam(value = "trialDbId", required = false) String trialDbId, @ApiParam(value = "Filter by trial name") @Valid @RequestParam(value = "trialName", required = false) String trialName, @ApiParam(value = "Filter by trial PUI") @Valid @RequestParam(value = "trialPUI", required = false) String trialPUI, @ApiParam(value = "Sort order. Name of the field to sort by.", allowableValues="trialDbId, trialName, programDbId, programName, locationDbId, startDate, endDate"
) @Valid @RequestParam(value = "sortBy", required = false) String sortBy, @ApiParam(value = "Sort order direction: asc/desc") @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder, @ApiParam(value = "An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)") @Valid @RequestParam(value = "externalReferenceID", required = false) String externalReferenceID, @ApiParam(value = "An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)") @Valid @RequestParam(value = "externalReferenceSource", required = false) String externalReferenceSource, @ApiParam(value = "Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page, @ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize, @ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong> Bearer {token_string} </strong>") @RequestHeader(value="Authorization", required=false) String authorization);


//    @ApiOperation(value = "Create new trials", notes = "Create new breeding Trials. A Trial represents a collection of related Studies. `trialDbId` is generated by the server.", authorizations = {
//        @Authorization(value = "AuthorizationToken")    }, tags={ "Trials" })
//    @ApiResponses(value = { 
//        @ApiResponse(code = 200, message = "OK", response = TrialListResponse.class),
//        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
//        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
//        @ApiResponse(code = 403, message = "Forbidden", response = String.class) })
//    @RequestMapping(value = "/trials",
//        produces = { "application/json" }, 
//        consumes = { "application/json" }, 
//        method = RequestMethod.POST)
//    ResponseEntity<TrialListResponse> trialsPost(@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong> Bearer {token_string} </strong>") @RequestHeader(value="Authorization", required=false) String authorization, @ApiParam(value = "") @Valid @RequestBody List<TrialNewRequest> body);


    @ApiOperation(value = "Get the details of a specific Trial", notes = "Get the details of a specific Trial", authorizations = {
        @Authorization(value = "AuthorizationToken")    }, tags={ "Trials" })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = TrialSingleResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 404, message = "Not Found", response = String.class) })
    @RequestMapping(value = ServerinfoApi.URL_BASE_PREFIX + "/" + trialsTrialDbIdGet_url,
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TrialSingleResponse> trialsTrialDbIdGet(@ApiParam(value = "The internal trialDbId", required=true) @PathVariable("trialDbId") String trialDbId, @ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong> Bearer {token_string} </strong>") @RequestHeader(value="Authorization", required=false) String authorization);


//    @ApiOperation(value = "Update the details of an existing Trial", notes = "Update the details of an existing Trial", authorizations = {
//        @Authorization(value = "AuthorizationToken")    }, tags={ "Trials" })
//    @ApiResponses(value = { 
//        @ApiResponse(code = 200, message = "OK", response = TrialSingleResponse.class),
//        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
//        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
//        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
//        @ApiResponse(code = 404, message = "Not Found", response = String.class) })
//    @RequestMapping(value = "/trials/{trialDbId}",
//        produces = { "application/json" }, 
//        consumes = { "application/json" }, 
//        method = RequestMethod.PUT)
//    ResponseEntity<TrialSingleResponse> trialsTrialDbIdPut(@ApiParam(value = "The internal trialDbId", required=true) @PathVariable("trialDbId") String trialDbId, @ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong> Bearer {token_string} </strong>") @RequestHeader(value="Authorization", required=false) String authorization, @ApiParam(value = "") @Valid @RequestBody TrialNewRequest body);

}

