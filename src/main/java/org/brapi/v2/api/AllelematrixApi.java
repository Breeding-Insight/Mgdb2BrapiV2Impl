/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.brapi.v2.api;

import io.swagger.annotations.Api;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import org.brapi.v2.model.AlleleMatrixResponse;
import org.brapi.v2.model.AlleleMatrixSearchRequest;
import org.springframework.web.bind.annotation.RequestBody;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-09-19T13:16:35.755Z[GMT]")
@Api(value = "Allele Matrix", description = "the alleleMatrix API", tags={ "Allele Matrix" })
public interface AllelematrixApi {
    
    public static final String alleleMatrixGet_url = "allelematrix";
    public static final String searchAlleleMatrixPost_url = "search/allelematrix";

    @Operation(summary = "Use this endpoint to retrieve a two dimensional matrix of genotype data", description = "Use this endpoint to retrieve a two dimensional matrix of genotype data. The response structure is based on the VCF file format,  but the search and filter parameters give the ability to slice and merge data sets. This allows the user to return the subset of data they are interested in,  without having to download the entire genotype file. <br/>Each row of data (outer array) corresponds to a variant definition, and each column (inner array) corresponds to a callSet.    ", security = {
        @SecurityRequirement(name = "AuthorizationToken")}, tags = {"Allele Matrix"})
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AlleleMatrixResponse.class))),
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))),
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))),
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)))})
    @RequestMapping(value = ServerinfoApi.URL_BASE_PREFIX + "/" + alleleMatrixGet_url,
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<AlleleMatrixResponse> allelematrixGet(@Parameter(in = ParameterIn.QUERY, description = "The requested page number for the Variant dimension of the matrix", schema = @Schema()) @Valid @RequestParam(value = "dimensionVariantPage", required = false) Integer dimensionVariantPage,
            @Parameter(in = ParameterIn.QUERY, description = "The requested page size for the Variant dimension of the matrix", schema = @Schema()) @Valid @RequestParam(value = "dimensionVariantPageSize", required = false) Integer dimensionVariantPageSize,
            @Parameter(in = ParameterIn.QUERY, description = "The requested page number for the CallSet dimension of the matrix", schema = @Schema()) @Valid @RequestParam(value = "dimensionCallSetPage", required = false) Integer dimensionCallSetPage,
            @Parameter(in = ParameterIn.QUERY, description = "The requested page size for the CallSet dimension of the matrix", schema = @Schema()) @Valid @RequestParam(value = "dimensionCallSetPageSize", required = false) Integer dimensionCallSetPageSize, 
            @Parameter(in = ParameterIn.QUERY, description = "Default Value = false <br/>If 'preview' is set to true, then the server should return with the \"dataMatrices\" field as null or empty. All other data fields should be returned normally.  This is intended to be a preview and give the client a sense of how large the matrix returned will be <br/>If 'preview' is set to false or not set (default), then the server should return all the matrix data as requested.", schema = @Schema()) @Valid @RequestParam(value = "preview", required = false, defaultValue = "false") Boolean preview, 
            //@Parameter(in = ParameterIn.QUERY, description = "\"dataMatrixNames\" is a comma seperated list of names (ie 'Genotype, Read Depth' etc). This list controls which data matrices are returned in the response. <br> This maps to a FORMAT field in the VCF file standard.", schema = @Schema()) @Valid @RequestParam(value = "dataMatrixNames", required = false) String dataMatrixNames,
            @Parameter(in = ParameterIn.QUERY, description = "\"dataMatrixAbbreviations\" is a comma seperated list of abbreviations (ie 'GT, RD' etc). This list controls which data matrices are returned in the response. <br> This maps to a FORMAT field in the VCF file standard.", schema = @Schema()) @Valid @RequestParam(value = "dataMatrixAbbreviations", required = false) String dataMatrixAbbreviations, 
            @Parameter(in = ParameterIn.QUERY, description = "The postion range to search <br/> Uses the format \"contig:start-end\" where \"contig\" is the chromosome or contig name, \"start\" is   the starting position of the range, and \"end\" is the ending position of the range <br> Example: CRHOM_1:12000-14000", schema = @Schema()) @Valid @RequestParam(value = "positionRange", required = false) String positionRange, 
            @Parameter(in = ParameterIn.QUERY, description = "Use this parameter to only return results associated with the given `Germplasm` unique identifier.  <br/>Use `GET /germplasm` to find the list of available `Germplasm` on a server.", schema = @Schema()) @Valid @RequestParam(value = "germplasmDbId", required = false) String germplasmDbId, 
            @Parameter(in = ParameterIn.QUERY, description = "Use this parameter to only return results associated with the given `Germplasm` by its human readable name.  <br/>Use `GET /germplasm` to find the list of available `Germplasm` on a server.", schema = @Schema()) @Valid @RequestParam(value = "germplasmName", required = false) String germplasmName, 
            @Parameter(in = ParameterIn.QUERY, description = "Use this parameter to only return results associated with the given `Germplasm` by its global permanent unique identifier.  <br/>Use `GET /germplasm` to find the list of available `Germplasm` on a server.", schema = @Schema()) @Valid @RequestParam(value = "germplasmPUI", required = false) String germplasmPUI, 
            @Parameter(in = ParameterIn.QUERY, description = "The ID which uniquely identifies a `CallSet` within the given database server", schema = @Schema()) @Valid @RequestParam(value = "callSetDbId", required = false) String callSetDbId, 
            @Parameter(in = ParameterIn.QUERY, description = "The ID which uniquely identifies a `Variant` within the given database server", schema = @Schema()) @Valid @RequestParam(value = "variantDbId", required = false) String variantDbId, 
            @Parameter(in = ParameterIn.QUERY, description = "The ID which uniquely identifies a `VariantSet` within the given database server", schema = @Schema()) @Valid @RequestParam(value = "variantSetDbId", required = false) String variantSetDbId, 
            @Parameter(in = ParameterIn.QUERY, description = "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)", schema = @Schema()) @Valid @RequestParam(value = "expandHomozygotes", required = false) Boolean expandHomozygotes, 
            @Parameter(in = ParameterIn.QUERY, description = "The string to use as a representation for missing data", schema = @Schema()) @Valid @RequestParam(value = "unknownString", required = false) String unknownString, 
            @Parameter(in = ParameterIn.QUERY, description = "The string to use as a separator for phased allele calls", schema = @Schema()) @Valid @RequestParam(value = "sepPhased", required = false) String sepPhased, 
            @Parameter(in = ParameterIn.QUERY, description = "The string to use as a separator for unphased allele calls", schema = @Schema()) @Valid @RequestParam(value = "sepUnphased", required = false) String sepUnphased, 
            @Parameter(in = ParameterIn.HEADER, description = "HTTP HEADER - Token used for Authorization   <strong> Bearer {token_string} </strong>", schema = @Schema()) @RequestHeader(value = "Authorization", required = false) String authorization) throws InterruptedException;
    
    @Operation(summary = "Submit a search request for a Allele Matrix", description = "Use this endpoint to retrieve a two dimensional matrix of genotype data. The response structure is based on the VCF format, but the search and filter parameters give the ability to slice and merge data sets. This allows the user to return the subset of data they are interested in, without having to download the entire genotype file. <br/>Each row of data (outer array) corresponds to a variant definition, and each column (inner array) corresponds to a callSet.  <br/>Search requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. If a server needs more time to process the request, it might respond with a `searchResultsDbId`. Use the corresponding `GET /search/calls/{searchResultsDbId}` to retrieve the results of the search.  <br/>Review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.", security = {
        @SecurityRequirement(name = "AuthorizationToken")    }, tags={ "Allele Matrix" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AlleleMatrixResponse.class))),         
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))),        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))),        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = ServerinfoApi.URL_BASE_PREFIX + "/" + searchAlleleMatrixPost_url,
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<AlleleMatrixResponse> searchAllelematrixPost(
            @Parameter(in = ParameterIn.HEADER, description = "HTTP HEADER - Token used for Authorization   <strong> Bearer {token_string} </strong>" ,schema=@Schema()) 
            @RequestHeader(value="Authorization", required=false) String authorization, 
            @Parameter(in = ParameterIn.DEFAULT, description = "Study Search request", schema=@Schema()) @Valid @RequestBody AlleleMatrixSearchRequest body) throws InterruptedException;

}
