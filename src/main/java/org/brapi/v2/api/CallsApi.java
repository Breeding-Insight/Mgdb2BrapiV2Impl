/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.brapi.v2.api;

import io.swagger.annotations.Api;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.util.List;
import org.brapi.v2.model.Call;
import org.brapi.v2.model.CallsListResponse;
import org.brapi.v2.model.CallsListResponseResult;
import org.brapi.v2.model.CallsSearchRequest;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-09-19T13:16:35.755Z[GMT]")
@Api(value = "calls", description = "the calls API", tags={ "Calls" })
public interface CallsApi {
    public static final String callsGet_url = "calls";
    public static final String callsPut_url = "calls";
    public static final String searchCallsPost_url = "search/calls";

    @Operation(summary = "Gets a filtered list of `Calls`", description = "Gets a filtered list of `Call` JSON objects.", security = {
        @SecurityRequirement(name = "AuthorizationToken")    }, tags={ "Calls" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CallsListResponse.class))),        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))),        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))),        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = ServerinfoApi.URL_BASE_PREFIX + "/" + callsGet_url,
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CallsListResponse> callsGet(@Parameter(in = ParameterIn.QUERY, description = "The ID which uniquely identifies a `CallSet` within the given database server" ,schema=@Schema()) @Valid @RequestParam(value = "callSetDbId", required = false) String callSetDbId, 
            @Parameter(in = ParameterIn.QUERY, description = "The ID which uniquely identifies a `Variant` within the given database server" ,schema=@Schema()) @Valid @RequestParam(value = "variantDbId", required = false) String variantDbId, 
            @Parameter(in = ParameterIn.QUERY, description = "The ID which uniquely identifies a `VariantSet` within the given database server" ,schema=@Schema()) @Valid @RequestParam(value = "variantSetDbId", required = false) String variantSetDbId, 
            @Parameter(in = ParameterIn.QUERY, description = "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)" ,schema=@Schema()) @Valid @RequestParam(value = "expandHomozygotes", required = false) Boolean expandHomozygotes, 
            @Parameter(in = ParameterIn.QUERY, description = "The string to use as a representation for missing data" ,schema=@Schema()) @Valid @RequestParam(value = "unknownString", required = false) String unknownString, 
            @Parameter(in = ParameterIn.QUERY, description = "The string to use as a separator for phased allele calls" ,schema=@Schema()) @Valid @RequestParam(value = "sepPhased", required = false) String sepPhased, 
            @Parameter(in = ParameterIn.QUERY, description = "The string to use as a separator for unphased allele calls" ,schema=@Schema()) @Valid @RequestParam(value = "sepUnphased", required = false) String sepUnphased, 
            @Parameter(in = ParameterIn.QUERY, description = "Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`." ,schema=@Schema()) @Valid @RequestParam(value = "page", required = false) Integer page, 
            @Parameter(in = ParameterIn.QUERY, description = "The size of the pages to be returned. Default is `1000`." ,schema=@Schema()) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize, 
            @Parameter(in = ParameterIn.HEADER, description = "HTTP HEADER - Token used for Authorization   <strong> Bearer {token_string} </strong>" ,schema=@Schema()) @RequestHeader(value="Authorization", required=false) String authorization);


    @Operation(summary = "Update existing `Calls` with new genotype value or metadata", description = "Update existing `Calls` with new genotype value or metadata <br/>Implementation Note -  <br/>A `Call` object does not have a DbId of its own. It is defined by the unique combination of  `callSetDbId`, `variantDbId`, and `variantSetDbId`. These three fields MUST be present for every  `call` update request. This endpoint should not allow these fields to be modified for a given  `call`. Modifying these fields in the database is effectively moving a cell to a different location in the genotype matrix. This action is dangerous and can cause data collisions.     ", security = {
        @SecurityRequirement(name = "AuthorizationToken")    }, tags={ "Calls" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CallsListResponseResult.class))),        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))),        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))),        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = ServerinfoApi.URL_BASE_PREFIX + "/" + callsPut_url,
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<CallsListResponse> callsPut(@Parameter(in = ParameterIn.HEADER, description = "HTTP HEADER - Token used for Authorization   <strong> Bearer {token_string} </strong>" ,schema=@Schema()) @RequestHeader(value="Authorization", required=false) String authorization, 
            @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody CallsListResponseResult body);

    @Operation(summary = "Submit a search request for `Calls`", description = "Submit a search request for `Calls`<br/> Search requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately.  If a server needs more time to process the request, it might respond with a `searchResultsDbId`.  Use the corresponding `GET /search/calls/{searchResultsDbId}` to retrieve the results of the search. <br/>  Review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.  <br/> <br/> <strong>NOTE:</strong> This endpoint uses Token based pagination. Please Review the  <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Pagination\">Pagination documentation</a> for additional implementation details.", security = {
        @SecurityRequirement(name = "AuthorizationToken")    }, tags={ "Calls" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CallsListResponse.class))),              
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))),        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))),        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = ServerinfoApi.URL_BASE_PREFIX + "/" + searchCallsPost_url,
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CallsListResponse> searchCallsPost(@Parameter(in = ParameterIn.HEADER, description = "HTTP HEADER - Token used for Authorization   <strong> Bearer {token_string} </strong>" ,schema=@Schema()) @RequestHeader(value="Authorization", required=false) String authorization, 
            @Parameter(in = ParameterIn.DEFAULT, description = "Study Search request", schema=@Schema()) @Valid @RequestBody CallsSearchRequest body);
    
    
}
