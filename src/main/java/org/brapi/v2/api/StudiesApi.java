/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.24).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.brapi.v2.api;

import io.swagger.annotations.*;

import org.brapi.v2.model.ReferenceListResponse1;
import org.brapi.v2.model.StudyListResponse;
import org.brapi.v2.model.StudyNewRequest;
import org.brapi.v2.model.StudySingleResponse;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.brapi.v2.codegen.v3.generators.java.SpringCodegen", date = "2021-03-16T09:51:33.671Z[GMT]")
public interface StudiesApi {

	public static final String studiesGet_url = "studies";
	
    @ApiOperation(value = "Get a filtered list of Studies", nickname = "studiesGet", notes = "`GET /studies/{study_id}` will return a JSON version of `Study`.", response = StudyListResponse.class, authorizations = {
            @Authorization(value = "AuthorizationToken")    }, tags={ "Studies", })
    
//    @Operation(summary = "Get a filtered list of Studies", description = "Get list of studies  StartDate and endDate should be ISO-8601 format for dates", security = {
//        @SecurityRequirement(name = "AuthorizationToken")    }, tags={ "Studies" })
//    @ApiResponses(value = { 
//        @ApiResponse(responseCode = "200", description = "OK", content = @Content(schema = @Schema(implementation = StudyListResponse.class))),
//        
//        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(schema = @Schema(implementation = String.class))),
//        
//        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(schema = @Schema(implementation = String.class))),
//        
//        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(schema = @Schema(implementation = String.class))) })
    
    
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "A successful response.", response = StudyListResponse.class),
            @ApiResponse(code = 400, message = "Bad Request", response = String.class),
            @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
            @ApiResponse(code = 403, message = "Forbidden", response = String.class) })
    
    @RequestMapping(value = ServerinfoApi.URL_BASE_PREFIX + "studies",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StudyListResponse> studiesGet(
    		@ApiParam(value = "Common name for the crop associated with this study") @Valid @RequestParam(value = "commonCropName", required = false) String commonCropName,
    		@ApiParam(value = "Filter based on study type unique identifier") @Valid @RequestParam(value = "studyType", required = false) String studyType,
    		@ApiParam(value = "Program filter to only return studies associated with given program id.") @Valid @RequestParam(value = "programDbId", required = false) String programDbId,
    		@ApiParam(value = "Filter by location") @Valid @RequestParam(value = "locationDbId", required = false) String locationDbId,
    		@ApiParam(value = "Filter by season or year") @Valid @RequestParam(value = "seasonDbId", required = false) String seasonDbId,
    		@ApiParam(value = "Filter by trial") @Valid @RequestParam(value = "trialDbId", required = false) String trialDbId,
    		@ApiParam(value = "Filter by study DbId") @Valid @RequestParam(value = "studyDbId", required = false) String studyDbId,
    		@ApiParam(value = "Filter by study name") @Valid @RequestParam(value = "studyName", required = false) String studyName,
    		@ApiParam(value = "Filter by study code") @Valid @RequestParam(value = "studyCode", required = false) String studyCode,
    		@ApiParam(value = "Filter by study PUI") @Valid @RequestParam(value = "studyPUI", required = false) String studyPUI,
    		@ApiParam(value = "Filter by germplasm DbId") @Valid @RequestParam(value = "germplasmDbId", required = false) String germplasmDbId,
    		@ApiParam(value = "Filter by observation variable DbId") @Valid @RequestParam(value = "observationVariableDbId", required = false) String observationVariableDbId,
    		@ApiParam(value = "Filter active status true/false.") @Valid @RequestParam(value = "active", required = false) Boolean active,
    		@ApiParam(value = "Name of the field to sort by.", allowableValues = "studyDbId, trialDbId, programDbId, locationDbId, seasonDbId, studyType, studyName, studyLocation, programName") @Valid @RequestParam(value = "sortBy", required = false) String sortBy, 
    		@ApiParam(value = "Sort order direction. Ascending/Descending.", allowableValues="asc, ASC, desc, DESC") @Valid @RequestParam(value = "sortOrder", required = false) String sortOrder, 
    		@ApiParam(value = "An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)") @Valid @RequestParam(value = "externalReferenceID", required = false) String externalReferenceID, 
    		@ApiParam(value = "An identifier for the source system or database of an external reference (use with `externalReferenceID` parameter)") @Valid @RequestParam(value = "externalReferenceSource", required = false) String externalReferenceSource, 
    		@ApiParam(value = "Used to request a specific page of data to be returned.  The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page,
    		@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
    		@RequestHeader(value="Authorization", required=false) String authorization);
    
//    @Operation(summary = "Create new Studies.", description = "Create new studies  Implementation Notes  StartDate and endDate should be ISO-8601 format for dates  `studDbId` is generated by the server.", security = {
//        @SecurityRequirement(name = "AuthorizationToken")    }, tags={ "Studies" })
//    @ApiResponses(value = { 
//        @ApiResponse(responseCode = "200", description = "OK", content = @Content(schema = @Schema(implementation = StudyListResponse.class))),
//        
//        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(schema = @Schema(implementation = String.class))),
//        
//        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(schema = @Schema(implementation = String.class))),
//        
//        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(schema = @Schema(implementation = String.class))) })
//    @RequestMapping(value = "/studies",
//        produces = { "application/json" }, 
//        consumes = { "application/json" }, 
//        method = RequestMethod.POST)
//    ResponseEntity<StudyListResponse> studiesPost(@Parameter(in = ParameterIn.HEADER, description = "HTTP HEADER - Token used for Authorization   <strong> Bearer {token_string} </strong>") @RequestHeader(value="Authorization", required=false) String authorization, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody List<StudyNewRequest> body);
//
//
//    /**
//     * @param studyDbId
//     * @param authorization
//     * @return
//     */
//    @Operation(summary = "Get the details for a specific Study", description = "Retrieve the information of the study required for field data collection  An additionalInfo field was added to provide a controlled vocabulary for less common data fields.", security = {
//        @SecurityRequirement(name = "AuthorizationToken")    }, tags={ "Studies" })
//    @ApiResponses(value = { 
//        @ApiResponse(responseCode = "200", description = "OK", content = @Content(schema = @Schema(implementation = StudySingleResponse.class))),
//        
//        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(schema = @Schema(implementation = String.class))),
//        
//        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(schema = @Schema(implementation = String.class))),
//        
//        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(schema = @Schema(implementation = String.class))),
//        
//        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(schema = @Schema(implementation = String.class))) })
//    @RequestMapping(value = "/studies/{studyDbId}",
//        produces = { "application/json" }, 
//        method = RequestMethod.GET)
//    ResponseEntity<StudySingleResponse> studiesStudyDbIdGet(@Parameter(in = ParameterIn.PATH, description = "Identifier of the study. Usually a number, could be alphanumeric.", required=true, schema=@Schema()) @PathVariable("studyDbId") String studyDbId, @Parameter(in = ParameterIn.HEADER, description = "HTTP HEADER - Token used for Authorization   <strong> Bearer {token_string} </strong>") @RequestHeader(value="Authorization", required=false) String authorization);
//
//
//    /**
//     * @param studyDbId
//     * @param authorization
//     * @param body
//     * @return
//     */
//    @Operation(summary = "Update an existing Study", description = "Update an existing Study with new data", security = {
//        @SecurityRequirement(name = "AuthorizationToken")    }, tags={ "Studies" })
//    @ApiResponses(value = { 
//        @ApiResponse(responseCode = "200", description = "OK", content = @Content(schema = @Schema(implementation = StudySingleResponse.class))),
//        
//        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(schema = @Schema(implementation = String.class))),
//        
//        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(schema = @Schema(implementation = String.class))),
//        
//        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(schema = @Schema(implementation = String.class))),
//        
//        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(schema = @Schema(implementation = String.class))) })
//    @RequestMapping(value = "/studies/{studyDbId}",
//        produces = { "application/json" }, 
//        consumes = { "application/json" }, 
//        method = RequestMethod.PUT)
//    ResponseEntity<StudySingleResponse> studiesStudyDbIdPut(@Parameter(in = ParameterIn.PATH, description = "Identifier of the study. Usually a number, could be alphanumeric.", required=true, schema=@Schema()) @PathVariable("studyDbId") String studyDbId, @Parameter(in = ParameterIn.HEADER, description = "HTTP HEADER - Token used for Authorization   <strong> Bearer {token_string} </strong>") @RequestHeader(value="Authorization", required=false) String authorization, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody StudyNewRequest body);

}

